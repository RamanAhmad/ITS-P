BAI6-ITS Praktikum IT-Sicherheit Hübner
SS 2024 Aufgabe 2 – Pseudozufallszahlen / Stromchiffren / Blockchiffren Seite 1 von 3
1. Pseudozufallszahlengenerierung
Implementieren Sie in JAVA einen Pseudozufallszahlengenerator nach der Linearen Kongruenzme-
thode!
a. Stellen Sie eine Klasse LCG mit einer Methode int nextInt() zur Verfügung. Diese Methode
soll nach der linearen Kongruenzmethode einen beliebigen int-Wert als „Zufallswert“ liefern. Der
Startwert des Pseudozufallszahlengenerators (X0) soll dem Konstruktor der LCG – Klasse als Para-
meter übergeben werden.
b. Testen Sie Ihre Implementierung folgendermaßen:
 Erzeugen Sie durch LCG 256 Pseudozufallszahlen (Startwert beliebig) und fügen Sie jeweils
das niederwertigste Byte jeder erzeugten Zahl einem HashSet hinzu (Klasse
HashSet<Integer>)
 Geben Sie anschließend die Anzahl der Elemente des HashSets aus, um zu ermitteln, wieviele
verschiedene Zahlen erzeugt wurden. Sollte der Wert kleiner als 256 sein, ist die Qualität
Ihrer Parameter oder Ihrer Implementierung nicht hinreichend.
Tipps:
 Verwenden Sie eine Parameterkombination für a, b und m aus der Datei „LinearerKongruenz-
generator-Infos.pdf“!
 Achten Sie grundsätzlich auf die Verwendung eines geeigneten Datentyps (z.B. „long“) für
interne Berechnungen, um mögliche Überläufe zu vermeiden!
 Das niederwertigste Byte erhalten Sie durch „Maskieren“ eines int-Wertes i, d.h. die oberen
drei Bytes werden durch bitweises AND auf 0 gesetzt: i & 0x000000FF
2. Stromchiffren
a. Schreiben Sie unter Verwendung der LCG – Klasse aus Teil 1 ein JAVA-Programm HC1 („HAW-
Chiffre 1“), welches als Eingabeparameter von der Standardeingabe einen numerischen Schlüssel
(Startwert) sowie den Pfad für eine Eingabedatei erhält.
Ihr Programm soll jedes Byte der Eingabedatei mit einem – ausgehend vom übergebenen Startwert –
neuen, „zufällig“ durch LCG erzeugten Schlüsselbyte mittels XOR verknüpfen und das Ergebnis in
eine Ausgabedatei schreiben.
b. Testen Sie Ihre Stromchiffre HC1, indem Sie eine Klartextdatei verschlüsseln und die erzeugte
Chiffredatei anschließend durch einen nochmaligen Aufruf von HC1 wieder entschlüsseln.
Verifizieren Sie (z.B. mittels „diff“), dass beide Dateien identische Inhalte besitzen.
3. Blockchiffren
a. Implementieren Sie in JAVA eine Klasse TripleDES, die einen 64 Bit-Klartextblock mit Hilfe einer
dreimaligen Anwendung (encrypt – decrypt – encrypt) des DES-Verfahrens verschlüsseln und umge-
kehrt einen gegebenen 64 Bit-Chiffretextblock entschlüsseln kann. Der bei der Erzeugung eines Tri-
pleDES-Objekts benötigte Schlüssel besteht aus drei Teilschlüsseln zu je 8 Byte (für das verwendete
DES-Verfahren).
BAI6-ITS Praktikum IT-Sicherheit Hübner
SS 2023 Aufgabe 2 – Pseudozufallszahlen / Stromchiffren / Blockchiffren Seite 2 von 3
Folgende Methoden sollen dabei implementiert werden:
Konstruktoren:
public TripleDES (byte[] keyPart1, byte[] keyPart2,
byte[] keyPart3)
Erzeugt ein TripleDES-Objekt mit den übergebenen Schlüsselbytes (pro Teil-Schlüssel 8
Bytes). Bei allen Ver- und Entschlüsselungsoperationen dieses TripleDES-Objekts wird der
übergebene Schlüssel verwendet.
Methoden:
public byte[] encryptBytes (byte[] plaintextBytes)
Verschlüsselt die ersten 8 Byte (64 Bit) des übergebenen Klartextblocks (Byte-Arrays)
plaintextBytes, der daher eine Mindestlänge von 8 Byte besitzen muss.
Der Chiffretext wird als neues Byte-Array mit der Länge 8 Byte (64 Bit) zurückgeliefert.
public byte[] decryptBytes (byte[] chiffreBytes)
Entschlüsselt die ersten 8 Byte (64 Bit) des übergebenen Chiffretextblocks (Byte-Arrays)
chiffreBytes, der daher eine Mindestlänge von 8 Byte besitzen muss. Der Klartext
wird als neues Byte-Array mit der Länge 8 Byte (64 Bit) zurückgeliefert.
Ergänzen Sie die beigefügte Datei TripleDES.java, so dass der dort in der main-Methode enthal-
tene Test erfolgreich durchläuft!
b. Implementieren Sie in JAVA eine Klasse SecureFile, welche die Aufgabe hat, alle Bytes einer
beliebigen Datei mit Ihrer TripleDES-Implementierung zu verschlüsseln oder zu entschlüsseln.
Ihr Programm soll Ihr TripleDES-Verfahren als Blockchiffre in der Betriebsart CFB („Cipher Feedback“-
Modus) verwenden.
Kommandozeilen-Parameter für den Aufruf von SecureFile:
1. Dateiname einer zu verschlüsselnden/entschlüsselnden Datei
2. Dateiname einer Schlüssel-Datei mit folgendem Inhalt:
Byte 1-24: 24 Schlüsselbytes (3 DES-Schlüssel mit je 8 Byte)
Byte 25-32: 8 Bytes für den Initialisierungsvektor zum Betrieb im
CFB - Modus
3. Dateiname der Ausgabedatei
4. Status-String zur Angabe der gewünschten Operation:
encrypt – Verschlüsselung der Datei
decrypt – Entschlüsselung der Datei
c. Testen Sie Ihre SecureFile-Implementierung, indem Sie die Datei 3DESTest.enc entschlüs-
seln (Tipp: Ergebnis ist eine PDF-Datei). Schlüssel und Initialisierungsvektor finden Sie in der Datei
3DESTest.key.
Der Kommandozeilenaufruf lautet also zum Beispiel:
java SecureFile 3DESTest.enc 3DESTest.key 3DESErgebnis.pdf decrypt
BAI6-ITS Praktikum IT-Sicherheit Hübner
SS 2023 Aufgabe 2 – Pseudozufallszahlen / Stromchiffren / Blockchiffren Seite 3 von 3
Tipps:
 Arbeiten Sie mit Input/Outputstreams und vermeiden Sie die Verwendung von
„Buffered Reader“ oder „Buffered Writer“ – Klassen!
 Für die Implementierung des DES-Verfahrens können Sie die beigefügte Datei DES.java ver-
wenden. Arbeiten Sie mit drei verschiedenen DES-Objekten, indem Sie diese bei jedem Triple-
DES-Aufruf von encryptBytes hintereinander in der Reihenfolge EDE (encrypt-decrypt-encrypt)
anwenden (achten Sie aber auf die korrekte Reihenfolge bei decryptBytes)!
 Beispielcode zum effizienten blockweisen Kopieren einer Datei:
FileInputStream in;
FileOutputStream out;
byte[] buffer = new byte[8];
int len;
while ((len = in.read(buffer)) > 0) {
out.write(buffer, 0, len);
}
Viel Spaß!